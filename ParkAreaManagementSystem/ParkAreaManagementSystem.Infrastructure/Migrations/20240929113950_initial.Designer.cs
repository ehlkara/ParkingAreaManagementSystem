// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkAreaManagementSystem.Infrastructure;

#nullable disable

namespace ParkAreaManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240929113950_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParkAreaManagementSystem.Domain.Entities.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParkingSpots");
                });

            modelBuilder.Entity("ParkAreaManagementSystem.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ParkAreaManagementSystem.Domain.Entities.ParkingSpot", b =>
                {
                    b.OwnsOne("ParkAreaManagementSystem.Domain.Entities.VehicleSize", "Size", b1 =>
                        {
                            b1.Property<int>("ParkingSpotId")
                                .HasColumnType("int");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ParkingSpotSize");

                            b1.HasKey("ParkingSpotId");

                            b1.ToTable("ParkingSpots");

                            b1.WithOwner()
                                .HasForeignKey("ParkingSpotId");
                        });

                    b.Navigation("Size")
                        .IsRequired();
                });

            modelBuilder.Entity("ParkAreaManagementSystem.Domain.Entities.Vehicle", b =>
                {
                    b.OwnsOne("ParkAreaManagementSystem.Domain.Entities.VehicleSize", "Size", b1 =>
                        {
                            b1.Property<int>("VehicleId")
                                .HasColumnType("int");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("VehicleSize");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId");
                        });

                    b.Navigation("Size")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
